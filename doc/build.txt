*build.vim*        Build and run projects or single files with the correct tools.

CONTENTS                                                         *build-contents*

  1. Description..............................................|build-description|
  2. Commands....................................................|build-commands|
    2.1 Common tasks......................................................|Build|
    2.2 Initialize the current project................................|BuildInit|
    2.3 Print build informations for the current file.................|BuildInfo|
  3. Functions..................................................|build-functions|
    3.1 Get current build system...............|build#get_current_build_system()|
  4. Options......................................................|build-options|
    4.1 Define and customize build systems......................|g:build#systems|
    4.2 Define single file build commands.....................|g:build#languages|
  5. License......................................................|build-license|

===============================================================================
1. Description                                                *build-description*

|Build.vim| is a plugin which figures out whether the file you're editing
belongs to a project with a build system or not. Thus it knows how to build
and run it. This plugin works by searching from the files directory upwards,
until it finds a known build file.
It tries to provide a homogeneous interface for common tasks, independently of
the underlying build system (or its absence).

===============================================================================
2. Commands                                                      *build-commands*

This plugin propose few commands:
- `:Build` a general purpose command used to achieve common tasks
- `:BuildInit` initialize the build system if needed
- `:BuildInfo` provide informations and help message on the current build
  system

-------------------------------------------------------------------------------
2.1 Common tasks                                                          *Build*

The `:Build` command takes either no arguments or a first argument called a
subcommand and any number of other arguments as you would pass them to a shell
command.

Subcommands should represent the same action across different build systems
independently from how each works.

For example `:Build clean` on a `Make` based project would expand to 
`make clean` while for a `CMake` based project it would result in
`rm -r build/`

Common subcommands are:
- `help` lists available subcommands, providing exemples of resulting  *Build_help*
  commands
- `info` echoes the basic informations on the detected build system:   *Build_info*
  working path and name
- `init` may not be available. When it is, it initialize the build of  *Build_init*
  the project.
- `build` tries to build the project                                  *Build_build*
- `run` run the current file if it make sense in the current build      *Build_run*
  system, otherwise run the whole project.
- `test` tries to run the tests                                         *Build_run*
- `clean` cleans build artifacts                                      *Build_clean*
- `do` is an escape hatch to access the underlying build system.         *Build_do*
  Arguments passed to `do` are passed as-is to the underlying build system
  command

When arguments are passed to a subcommand they are passed as-is to the
underlying build system allowing for per-project tweakings.

Examples:
>
    1) :Build
    2) :Build build --release
    3) :Build clean
    4) :Build test
<

If the detected build system was `Make`, those commands would result in:
>
    1) make --jobs=4
    2) make --jobs=4 --release
    3) make --jobs=4 clean
    4) make --jobs=4 test
<

If the detected build system was `Dune`, those would result in:
>
   1) dune build
   2) dune build --release
   3) dune clean
   4) dune runtest
<

-------------------------------------------------------------------------------
2.2 Initialize the current project                                    *BuildInit*

`:BuildInit` does the same thing as `:Build init`.
It try to initialize the init system to which the current file belongs. Takes
optional arguments which will be passed to the build systems init command.

Examples:
>
  1) :BuildInit
  2) :BuildInit --enable-gtk --cflags="-O2 -Wall"
<
If the current file belongs to an autotools project, it will run the following
commands:
>
  1) ./configure
  2) ./configure --enable-gtk --cflags="-O2 -Wall"
<
-------------------------------------------------------------------------------
2.3 Print build informations for the current file                     *BuildInfo*

Show build commands and other informations related to building the current
file.
In effect do the same as `:Build info` and `:Build help`.

===============================================================================
3. Functions                                                    *build-functions*

-------------------------------------------------------------------------------
3.1 Get current build system                   *build#get_current_build_system()*

Returns a |Dictionary| with the name of the current build system and the
path to the directory containing the build file. This function returns {}
if no build system could be found.

Example result for calling this function from a buffer which contains the
file `/some/path/CMakeLists.txt`:
>
  {
    'name': 'CMake',
    'path': '/some/path',
  }
<
===============================================================================
4. Options                                                        *build-options*

-------------------------------------------------------------------------------
4.1 Define and customize build systems                          *g:build#systems*

|build.vim| supports various build systems by default. To modify their
behavior, override the desired entry in |g:build#systems|:
>
  let g:build#systems =
  \ {
  \   'Make':
  \   {
  \     'commands': {
  \       'build': 'make -j20',
  \       'run'  : 'make run_main',
  \     }
  \   },
  \ }
<
New build systems can be added to |g:build#systems|:
>
  let g:build#systems =
  \ {
  \   'my-build-system':
  \   {
  \     'file'     : 'foo.json',
  \     'commands' : { 
  \       'do'   : 'foomake',
  \       'init' : 'mkdir .foomake_cache',
  \       'build': 'foomake build',
  \       'clean': 'foomake wipe',
  \       'run'  : 'foomake cmd',
  \       'bar'  : 'foomake bar', " an uncommon command
  \     },
  \   },
  \ }
<

Every build system must have a name, a file entry and a commands entry.  The
file entry contains a comma-separated list of filenames or globs (see vim help
for |glob()|), describing the build files to search for. The commands entry
contains the commands for running the build system. It will be run in the
directory containing the build file.
You never have to add `info` or `help` that are handled internally.
You should provide `init` if it makes sense for your build system.
You can add new commands if you want, they will be recognized on a per-build
system basis.
You can omit some of the common commands if they don't make sense in your case.

Every command will be executed in the directory of the detected build file and can contain
four different placeholders:

                                                                         *%PATH%*
%PATH% - Shell-escaped absolute path to the directory containing the current
file.
                                                                      *%RELPATH%*
%RELPATH% - Shell-escaped relative path from the directory of the build file
to the directory of the current file
                                                                         *%NAME%*
%NAME% - Shell-escaped filename with its extension.
                                                                         *%HEAD%*
%HEAD% - Shell-escaped filename without its extension.

-------------------------------------------------------------------------------
4.2 Define single file build commands                         *g:build#languages*

If |build.vim| is unable to detect to which build system the current file
belongs to, it will use language specific commands to build only the current
file. To define your own commands, or to override existing ones, you must
create a dictionary named |g:build#languages|. Here is an example:
>
  let g:build#languages =
    \ {
    \   'python':
    \   {
    \     'test' : 'python-tester ./%NAME%',
    \   }
    \ }
<
Every command will be executed in the directory of the current file and can
contain the same placeholders. In this case %RELPATH% always expand to `'.'`.

===============================================================================
5. License                                                        *build-license*
>
  Copyright (c) 2020 Alexander Heinrich

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
<
