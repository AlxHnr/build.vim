*build.vim*        Build and run projects or single files with the correct tools.

CONTENTS                                                         *build-contents*

  1. Description..............................................|build-description|
  2. Commands....................................................|build-commands|
    2.1 Build a specific target...........................................|Build|
    2.2 Initialize the current project................................|BuildInit|
  3. Functions..................................................|build-functions|
    3.1 Build the given target.....................................|build#target|
    3.2 Initialize the current project...............................|build#init|
    3.3 Run 'makeprg'.........................................|build#run_makeprg|
  4. Options......................................................|build-options|
    4.1 Define and customize build systems......................|g:build#systems|
    4.2 Define single file build commands.....................|g:build#languages|
    4.3 Set the vim command to use for building................|g:build#make_cmd|
  5. License......................................................|build-license|

===============================================================================
1. Description                                                *build-description*

|Build.vim| is a plugin which figures out whether the file you're editing
belongs to a project with a build system or not. Thus it knows how to build
and run it. This plugin works by searching from the files directory upwards,
until it finds a known build file.

===============================================================================
2. Commands                                                      *build-commands*

-------------------------------------------------------------------------------
2.1 Build a specific target                                               *Build*

See |build#target| for more informations. The caller must take care of quoting
and escaping the arguments.

-------------------------------------------------------------------------------
2.2 Initialize the current project                                    *BuildInit*

See |build#init|. The caller must take care of quoting and escaping the
arguments.

===============================================================================
3. Functions                                                    *build-functions*

-------------------------------------------------------------------------------
3.1 Build the given target                                         *build#target*

The function |build#target| takes an arbitrary amount of arguments. They
will be passed directly to the current build command. If the current file
doesn't belong to any known build system, it will use language specific
commands to build it. See |build#languages|.

The caller must take care of quoting and escaping those arguments.

-------------------------------------------------------------------------------
3.2 Initialize the current project                                   *build#init*

The function |build#init| takes an arbitrary amount of arguments and will pass
them directly to the build systems init command. The caller must take care of
quoting and escaping those arguments. If the current build system has no init
command, it will stop with a message.

-------------------------------------------------------------------------------
3.3 Run 'makeprg'                                             *build#run_makeprg*

In Vim this function calls lmake!. In Neovim it runs 'makeprg' in a terminal
below the current buffer. It was intended to be used through |g:build#make_cmd|.

===============================================================================
4. Options                                                        *build-options*

-------------------------------------------------------------------------------
4.1 Define and customize build systems                          *g:build#systems*

|build.vim| supports various build systems by default. To modify their
behavior, override the desired entry in |g:build#systems|:
>
  let g:build#systems =
  \ {
  \   'Make':
  \   {
  \     'command': 'make -j20',
  \   },
  \ }
<
New build systems can be added to |g:build#systems|:
>
  let g:build#systems =
  \ {
  \   'my-build-system':
  \   {
  \     'file'    : 'foo.json',
  \     'command' : 'foomake',
  \     'init'    : './configure',
  \   },
  \ }
<
Every build system must have a name, a file entry and a command entry.
The file entry contains a comma separated list of filenames, describing the
build files to search. The command entry contains the command for running the
build system. It will be run inside the directory relative to the build file.
The init entry is optional and contains the command for initializing the
build.

-------------------------------------------------------------------------------
4.2 Define single file build commands                         *g:build#languages*

If |build.vim| is unable to detect to which build system the current file
belongs to, it will use language specific commands to build only the current
file. To define your own commands, or to override existing ones, you must
create a dictionary named |g:build#languages|. Here is an example:
>
  let g:build#languages =
    \ {
    \   'python':
    \   {
    \     'test' : 'python-tester "%NAME%"',
    \   }
    \ }
<
Every command will be executed in the directory of the file and can contain
three different placeholders:

%PATH% - The full path to the directory containing the file.
%NAME% - The filename with its extension.
%HEAD% - The filename without its extension.

-------------------------------------------------------------------------------
4.3 Set the vim command to use for building                    *g:build#make_cmd*

This Vim command will be run inside the project directory with 'makeprg' set.

Default:
>
  let g:build#make_cmd = 'call build#run_makeprg()'
<
===============================================================================
5. License                                                        *build-license*
>
  Copyright (c) 2019 Alexander Heinrich

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
<
