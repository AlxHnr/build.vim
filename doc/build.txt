*build.vim*        Build and run projects or single files with the correct tools.

CONTENTS                                                         *build-contents*

  1. Description..............................................|build-description|
  2. Commands....................................................|build-commands|
  3. Options......................................................|build-options|
    3.1 Autochdir into the project directory..................|g:build#autochdir|
    3.2 Define and customize build systems......................|g:build#systems|
  4. License......................................................|build-license|

===============================================================================
1. Description                                                *build-description*

|build| is a plugin, which figures out whether the file you're editing belongs
to a project with a build system or not. Thus it knows how to build and run
the stuff you are editing. This plugin operates by searching from the files
directory upwards, until it finds a known build file. It will set 'makeprg'.

===============================================================================
2. Commands                                                      *build-commands*

===============================================================================
3. Options                                                        *build-options*

-------------------------------------------------------------------------------
3.1 Autochdir into the project directory                      *g:build#autochdir*

If |build.vim| detects that your file belongs to a build system, and this
variable is set to 1, it will change the local directory path of the current
buffer.

-------------------------------------------------------------------------------
3.2 Define and customize build systems                          *g:build#systems*

By default |build.vim| supports various build system already. To add new build
systems, or to override certain settings of the predefined build systems, you
must create the dictionary |g:build#systems|. Here is a skeleton example:
>
  let g:build#systems =
  \   'name':
  \   {
  \     'file'    : 'foo.json',
  \     'command' : 'foomake',
  \     'target-args':
  \     {
  \       'clean' : '--force clean',
  \     }
  \   }
<
Every build system must have a name, a file entry and a command entry. The
file entry contains a comma separated list of filenames, describing the build
file which should be searched. The command entry contains the command needed
to invoke the build system.

The name of the target will be passed to the build command. So if you want to
run the clean target, the command will be called with "clean" as argument. To
pass another argument instead, you need to define a replacement argument. This
is done inside another dict associated with "target-args". See the example
above.

===============================================================================
4. License                                                        *build-license*
>
  Copyright (c) 2015 Alexander Heinrich <alxhnr@nudelpost.de>

  This software is provided 'as-is', without any express or implied
  warranty. In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

     1. The origin of this software must not be misrepresented; you must
        not claim that you wrote the original software. If you use this
        software in a product, an acknowledgment in the product
        documentation would be appreciated but is not required.

     2. Altered source versions must be plainly marked as such, and must
        not be misrepresented as being the original software.

     3. This notice may not be removed or altered from any source
        distribution.
<
