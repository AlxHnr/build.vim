*build.vim*        Build and run projects or single files with the correct tools.

CONTENTS                                                         *build-contents*

  1. Description..............................................|build-description|
  2. Commands....................................................|build-commands|
    2.1 Build a specific target...........................................|Build|
    2.2 Initialize the current project................................|BuildInit|
    2.3 Print build informations for the current file.................|BuildInfo|
  3. Functions..................................................|build-functions|
    3.1 Get current build system...............|build#get_current_build_system()|
  4. Options......................................................|build-options|
    4.1 Define and customize build systems......................|g:build#systems|
    4.2 Define single file build commands.....................|g:build#languages|
  5. License......................................................|build-license|

===============================================================================
1. Description                                                *build-description*

|Build.vim| is a plugin which figures out whether the file you're editing
belongs to a project with a build system or not. Thus it knows how to build
and run it. This plugin works by searching from the files directory upwards,
until it finds a known build file.

===============================================================================
2. Commands                                                      *build-commands*

-------------------------------------------------------------------------------
2.1 Build a specific target                                               *Build*

Try to build the given optional target with the specified optional arguments.
If the current file does not belong to a build system, it will be build using
associated compilers.

Examples:
>
  1) :Build
  2) :Build build
  3) :Build build -O2 -DMY_MACRO="Value 123"
  4) :Build all CFLAGS="-O2 -Werror"
  5) :Build clean
<
If the current file belongs to an autotools project, it will run the following
commands:
>
  1) make --jobs=8
  2) make --jobs=8 build
  3) make --jobs=8 build -O2 -DMY_MACRO="Value 123"
  4) make --jobs=8 all CFLAGS="-O2 -Werror"
  5) make --jobs=8 clean
<
If the current file is a standalone C file which does not belong to any known
build system, it will run the following commands:
>
  1) gcc -std=c11 -Wall -Wextra ./'foo.c' -o ./'foo'
  2) gcc -std=c11 -Wall -Wextra ./'foo.c' -o ./'foo'
  3) gcc -std=c11 -Wall -Wextra ./'foo.c' -o ./'foo' -O2 -DMY_MACRO="Value 123"
  4) -- ERROR: target 'all' is not defined for C files --
  5) rm ./'foo'
<
-------------------------------------------------------------------------------
2.2 Initialize the current project                                    *BuildInit*

Try to initialize the init system to which the current file belongs. Takes
optional arguments which will be passed to the build systems init command.

Examples:
>
  1) :BuildInit
  2) :BuildInit --enable-gtk --cflags="-O2 -Wall"
<
If the current file belongs to an autotools project, it will run the following
commands:
>
  1) ./configure
  2) ./configure --enable-gtk --cflags="-O2 -Wall"
<
-------------------------------------------------------------------------------
2.3 Print build informations for the current file                     *BuildInfo*

Show build commands and other informations related to building the current
file.

===============================================================================
3. Functions                                                    *build-functions*

-------------------------------------------------------------------------------
3.1 Get current build system                   *build#get_current_build_system()*

Returns a |Dictionary| with the name of the current build system and the
path to the directory containing the build file. This function returns {}
if no build system could be found.

Example result for calling this function from a buffer which contains the
file `/some/path/CMakeLists.txt`:
>
  {
    'name': 'CMake',
    'path': '/some/path',
  }
<
===============================================================================
4. Options                                                        *build-options*

-------------------------------------------------------------------------------
4.1 Define and customize build systems                          *g:build#systems*

|build.vim| supports various build systems by default. To modify their
behavior, override the desired entry in |g:build#systems|:
>
  let g:build#systems =
  \ {
  \   'Make':
  \   {
  \     'command': 'make -j20',
  \   },
  \ }
<
New build systems can be added to |g:build#systems|:
>
  let g:build#systems =
  \ {
  \   'my-build-system':
  \   {
  \     'file'    : 'foo.json',
  \     'command' : 'foomake',
  \     'init'    : './configure',
  \   },
  \ }
<
Every build system must have a name, a file entry and a command entry.
The file entry contains a comma-separated list of filenames, describing the
build files to search for. The command entry contains the command for
running the build system. It will be run in the directory containing the
build file. The init entry is optional and contains the command for
initializing the build.

-------------------------------------------------------------------------------
4.2 Define single file build commands                         *g:build#languages*

If |build.vim| is unable to detect to which build system the current file
belongs to, it will use language specific commands to build only the current
file. To define your own commands, or to override existing ones, you must
create a dictionary named |g:build#languages|. Here is an example:
>
  let g:build#languages =
    \ {
    \   'python':
    \   {
    \     'test' : 'python-tester ./%NAME%',
    \   }
    \ }
<
Every command will be executed in the directory of the file and can contain
three different placeholders:

%PATH% - Shell-escaped absolute path to the directory containing the file.
%NAME% - Shell-escaped filename with its extension.
%HEAD% - Shell-escaped filename without its extension.

===============================================================================
5. License                                                        *build-license*
>
  Copyright (c) 2020 Alexander Heinrich

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
<
