*build.vim*        Build and run projects or single files with the correct tools.

CONTENTS                                                         *build-contents*

  1. Description..............................................|build-description|
  2. Commands....................................................|build-commands|
    2.1 Build a specific target...........................................|Build|
    2.2 Initialize the current project................................|BuildInit|
  3. Functions..................................................|build-functions|
    3.1 Search for known build systems..............................|build#setup|
    3.2 Build the given target.....................................|build#target|
    3.3 Initialize the current project...............................|build#init|
  4. Options......................................................|build-options|
    4.1 Autochdir into the project directory..................|g:build#autochdir|
    4.2 Define and customize build systems......................|g:build#systems|
    4.3 Define single file build commands.....................|g:build#languages|
    4.4 Set the vim make command to use........................|g:build#make_cmd|
  5. License......................................................|build-license|

===============================================================================
1. Description                                                *build-description*

|build| is a plugin, which figures out whether the file you're editing belongs
to a project with a build system or not. Thus it knows how to build and run
it. This plugin works by searching from the files directory upwards, until it
finds a known build file.

Once a build file was found, the following variables will be set for the
current buffer:

*b:build_system_name* contains the name of the build system, e.g. "make".

*b:build_path* contains the full path to the directory of the build file.

===============================================================================
2. Commands                                                      *build-commands*

-------------------------------------------------------------------------------
2.1 Build a specific target                                               *Build*

See |build#target| for more informations. The caller must take care of quoting
and escaping the arguments.

-------------------------------------------------------------------------------
2.2 Initialize the current project                                    *BuildInit*

See |build#init|. The caller must take care of quoting and escaping the
arguments.

===============================================================================
3. Functions                                                    *build-functions*

-------------------------------------------------------------------------------
3.1 Search for known build systems                                  *build#setup*

The function |build#setup| takes no arguments and searches from the current
files path upwards for a known build file. It will setup some local variables,
and if |g:build#autochdir| is set to 1 it will change the working directory of
the current buffer. Usually you don't need to call this function manually. In
the case that no build file could be found, this function will do nothing but
unset |b:build_system_name| and |b:build_path|.

-------------------------------------------------------------------------------
3.2 Build the given target                                         *build#target*

The function |build#target| takes an arbitrary amount of arguments. If no
argument was given, it will try to build the "build" target. Otherwise the
first argument must be a valid target name. It will be passed directly to the
build command, unless a replacement argument was defined in |g:build#systems|.
If the current file doesn't belong to any known build system, it will use
language specific commands to build it. See |build#languages|.

Besides the target name, it takes an arbitrary amount of additional arguments,
which will be passed directly to the build command. The caller must take care
of quoting and escaping those arguments.

-------------------------------------------------------------------------------
3.3 Initialize the current project                                   *build#init*

The function |build#init| takes an arbitrary amount of arguments and will pass
them directly to the build systems init command. The caller must take care of
quoting and escaping those arguments. If the current build system has no init
command, it will stop with a message.

===============================================================================
4. Options                                                        *build-options*

-------------------------------------------------------------------------------
4.1 Autochdir into the project directory                      *g:build#autochdir*

If |build.vim| detects that your file belongs to a build system and this
variable is set to 1, it will change the buffers directory path to
|b:build_path|.

-------------------------------------------------------------------------------
4.2 Define and customize build systems                          *g:build#systems*

|build.vim| supports various build system by default. To add new build
systems, or to override certain settings of the predefined build systems, you
must create the dictionary |g:build#systems|. Here is an example:
>
  let g:build#systems =
  \   'name':
  \   {
  \     'file'    : 'foo.json',
  \     'command' : 'foomake',
  \     'init'    : './configure',
  \     'target-args':
  \     {
  \       'clean' : '--force clean',
  \     }
  \   }
<
Every build system must have a name, a file entry and a command entry. The
file entry contains a comma separated list of filenames, describing the build
file which should be searched. The command entry contains the command needed
to invoke the build system. It will be executed in the directory of the build
file. The "init" entry is optional and contains the command required to
initialize the build.

The name of the target will be passed to the build command. E.g. if you want
to run the clean target, the command will be called with "clean" as argument.
To pass another argument instead, you need to define a replacement argument.
This is done inside another dictionary associated with "target-args". See the
example above.

-------------------------------------------------------------------------------
4.3 Define single file build commands                         *g:build#languages*

If |build.vim| is unable to detect to which build system the current file
belongs to, it will use language specific commands to build only the current
file. To define your own commands, or to override existing ones, you must
create a dictionary named |g:build#languages|. Here is an example:
>
  let g:build#languages =
    \ {
    \   'python':
    \   {
    \     'test' : 'python-tester "%NAME%"',
    \   }
    \ }
<
Every command will be executed in the directory of the file and can contain
three different placeholders:

%PATH% - The full path to the directory containing the file.
%NAME% - The filename with its extension.
%HEAD% - The filename without its extension.

-------------------------------------------------------------------------------
4.4 Set the vim make command to use                            *g:build#make_cmd*

The Vim command to use for invoking 'makeprg'. See 'make' and 'lmake'.

Default:
>
  let g:build#make_cmd = 'lmake!'
<
===============================================================================
5. License                                                        *build-license*
>
  Copyright (c) 2015 Alexander Heinrich <alxhnr@nudelpost.de>

  This software is provided 'as-is', without any express or implied
  warranty. In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

     1. The origin of this software must not be misrepresented; you must
        not claim that you wrote the original software. If you use this
        software in a product, an acknowledgment in the product
        documentation would be appreciated but is not required.

     2. Altered source versions must be plainly marked as such, and must
        not be misrepresented as being the original software.

     3. This notice may not be removed or altered from any source
        distribution.
<
