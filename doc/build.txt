*build.vim*        Build and run projects or single files with the correct tools.

CONTENTS                                                         *build-contents*

  1. Description..............................................|build-description|
  2. Commands....................................................|build-commands|
  3. Functions..................................................|build-functions|
    3.1 Get current build system...............|build#get_current_build_system()|
  4. Options......................................................|build-options|
    4.1 Define and customize build systems......................|g:build#systems|
    4.2 Define single file build commands.....................|g:build#languages|
  5. License......................................................|build-license|

===============================================================================
1. Description                                                *build-description*

|Build.vim| is a plugin which figures out whether the file you're editing
belongs to a project with a build system or not. Thus it knows how to build
and run it. This plugin works by searching from the files directory upwards,
until it finds a known build file.

===============================================================================
2. Commands                                                              *:Build*

The `:Build` command takes a subcommand as argument, like `:Build build`,
`:Build test` or `:Build clean`. All additional arguments are passed to the
underlying build system or compiler. If `:Build` is run without any arguments,
it will be equivalent to `:Build build`.

Examples:

- `:Build clean` will clean the project. If the project is an Autotools
  project, it will be equivalent to running "make clean"
- `:Build init -DCMAKE_BUILD_TYPE=Release` will initialize the build system.
- `:Build do --custom --arguments` passes the given arguments directly to the
  build system.

The executed command depends on the current build system:
>
    1) :Build
    2) :Build build --release
    3) :Build clean
    4) :Build test
<
If the detected build system was `Make`, those commands would result in:
>
    1) make --jobs=4
    2) make --jobs=4 --release
    3) make --jobs=4 clean
    4) make --jobs=4 test
<
If the detected build system was `Dune`, those would result in:
>
   1) dune build
   2) dune build --release
   3) dune clean
   4) dune runtest
<
===============================================================================
3. Functions                                                    *build-functions*

-------------------------------------------------------------------------------
3.1 Get current build system                   *build#get_current_build_system()*

Returns a |Dictionary| with the name of the current build system and the
path to the directory containing the build file. This function returns {}
if no build system could be found.

Example result for calling this function from a buffer which contains the
file `/some/path/CMakeLists.txt`:
>
  {
    'name': 'CMake',
    'path': '/some/path',
    'fallback': v:false,
  }
<
===============================================================================
4. Options                                                        *build-options*

-------------------------------------------------------------------------------
4.1 Define and customize build systems                          *g:build#systems*

|build.vim| supports various build systems by default. To modify their
behavior, override the desired entry in |g:build#systems|:
>
  let g:build#systems =
  \ {
  \   'Make':
  \   {
  \     'commands': {
  \       'build': 'make -j20',
  \       'run'  : 'make run_main',
  \     }
  \   },
  \ }
<
New build systems can be added to |g:build#systems|:
>
  let g:build#systems =
  \ {
  \   'my-build-system':
  \   {
  \     'file'     : 'foo.json,Foo.json,*.foobuild',
  \     'commands' : {
  \       'do'   : 'foomake',
  \       'init' : './configure.sh',
  \       'build': 'foomake build',
  \       'clean': 'foomake wipe',
  \       'run'  : 'foomake cmd ./%HEAD%',
  \     },
  \   },
  \ }
<
Every build system must have a name, a file entry and a commands entry. The
file entry contains a comma-separated list of filenames, describing the build
files to search for. It can contain wildcards. See |globpath()|. The commands
for running the build system will be run in the directory containing the build
file.

Commands can contain placeholders.                           *build_placeholders*

`%NAME%` - Shell-escaped filename with its extension.
`%HEAD%` - Shell-escaped filename without its extension.
`%PATH%` - Shell-escaped absolute path to the directory containing the current
file.
`%RELPATH%` - Shell-escaped relative path from the directory of the build file
to the directory of the current file.

-------------------------------------------------------------------------------
4.2 Define single file build commands                         *g:build#languages*

If |build.vim| is unable to detect to which build system the current file
belongs to, it will use language specific commands to build only the current
file. To define your own commands, or to override existing ones, you must
create a dictionary named |g:build#languages|. Here is an example:
>
  let g:build#languages =
    \ {
    \   'python':
    \   {
    \     'test' : 'python-tester ./%NAME%',
    \   }
    \ }
<
Every command will be executed in the directory of the current file. They can
contain |build_placeholders|. In this case `%RELPATH%` will always expand to `'.'`.

===============================================================================
5. License                                                        *build-license*
>
  Copyright (c) 2020 Alexander Heinrich

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
<
